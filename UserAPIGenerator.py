# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class UserAPIGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def userAPI(self, parent=None):
        with RuleContext(self, UnparserRule(name='userAPI', parent=parent)) as current:
            UnlexerRule(src='email: ', parent=current)
            self.email(parent=current)
            UnlexerRule(src='\n', parent=current)
            UnlexerRule(src='is_active: ', parent=current)
            self.is_active(parent=current)
            UnlexerRule(src='\n', parent=current)
            UnlexerRule(src='full_name: ', parent=current)
            self.full_name(parent=current)
            UnlexerRule(src='\n', parent=current)
            UnlexerRule(src='password: ', parent=current)
            self.password(parent=current)
            UnlexerRule(src='\n', parent=current)
            UnlexerRule(src='username: ', parent=current)
            self.username(parent=current)
            UnlexerRule(src='\n', parent=current)
            UnlexerRule(src='is_superuser: ', parent=current)
            self.is_superuser(parent=current)
            UnlexerRule(src='\n', parent=current)
            self.EOF(parent=current)
            return current
    userAPI.min_depth = 2

    def email(self, parent=None):
        with RuleContext(self, UnparserRule(name='email', parent=parent)) as current:
            with AlternationContext(self, [1, 1, 1, 1], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='0: ', parent=current)
                    self.EMPTY_EMAIL(parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='1: ', parent=current)
                    self.MISSING_AT(parent=current)
                elif choice0 == 2:
                    UnlexerRule(src='2: ', parent=current)
                    self.MISSING_DOMAIN(parent=current)
                elif choice0 == 3:
                    UnlexerRule(src='3: ', parent=current)
                    self.VALID_EMAIL(parent=current)
            return current
    email.min_depth = 1

    def EMPTY_EMAIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMPTY_EMAIL', parent=parent)) as current:
            UnlexerRule(src=' ', parent=current)
            return current
    EMPTY_EMAIL.min_depth = 0

    def MISSING_AT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MISSING_AT', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            UnlexerRule(src=' ', parent=current)
            return current
    MISSING_AT.min_depth = 0

    def MISSING_DOMAIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MISSING_DOMAIN', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            UnlexerRule(src='@', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 1, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[3]), parent=current)
            UnlexerRule(src=' ', parent=current)
            return current
    MISSING_DOMAIN.min_depth = 0

    def VALID_EMAIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALID_EMAIL', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[4]), parent=current)
            UnlexerRule(src='@', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 1, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[5]), parent=current)
            UnlexerRule(src='.', parent=current)
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['com', 'org'][choice0], parent=current)
            return current
    VALID_EMAIL.min_depth = 0

    def is_active(self, parent=None):
        with RuleContext(self, UnparserRule(name='is_active', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='0: ', parent=current)
                    UnlexerRule(src='true', parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='1: ', parent=current)
                    UnlexerRule(src='false', parent=current)
            return current
    is_active.min_depth = 0

    def full_name(self, parent=None):
        with RuleContext(self, UnparserRule(name='full_name', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    self.ALPHANUMERIC(parent=current)
            return current
    full_name.min_depth = 1

    def password(self, parent=None):
        with RuleContext(self, UnparserRule(name='password', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='0: ', parent=current)
                    self.EMPTY_PASSWORD(parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='1: ', parent=current)
                    self.ALPHANUMERIC(parent=current)
                    if self._max_depth >= 1:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            with AlternationContext(self, [1, 1], [1, 1]) as weights1:
                                choice1 = self._model.choice(current, 1, weights1)
                                [self.ALPHANUMERIC, self.SPECIAL_CHARACTERS][choice1](parent=current)
            return current
    password.min_depth = 1

    def EMPTY_PASSWORD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMPTY_PASSWORD', parent=parent)) as current:
            UnlexerRule(src=' ', parent=current)
            return current
    EMPTY_PASSWORD.min_depth = 0

    def username(self, parent=None):
        with RuleContext(self, UnparserRule(name='username', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='0: ', parent=current)
                    self.EMPTY_USERNAME(parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='1: ', parent=current)
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 0, min=1, max=inf):
                            self.ALPHANUMERIC(parent=current)
            return current
    username.min_depth = 1

    def EMPTY_USERNAME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMPTY_USERNAME', parent=parent)) as current:
            UnlexerRule(src=' ', parent=current)
            return current
    EMPTY_USERNAME.min_depth = 0

    def is_superuser(self, parent=None):
        with RuleContext(self, UnparserRule(name='is_superuser', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='0: ', parent=current)
                    UnlexerRule(src='true', parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='1: ', parent=current)
                    UnlexerRule(src='false', parent=current)
            return current
    is_superuser.min_depth = 0

    def ALPHANUMERIC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ALPHANUMERIC', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[6]), parent=current)
            return current
    ALPHANUMERIC.min_depth = 0

    def SPECIAL_CHARACTERS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SPECIAL_CHARACTERS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[7]), parent=current)
            return current
    SPECIAL_CHARACTERS.min_depth = 0

    _default_rule = userAPI

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(37, 38), range(43, 44), range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
        2: list(itertools.chain.from_iterable([range(37, 38), range(43, 44), range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
        3: list(itertools.chain.from_iterable([range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(97, 123)])),
        4: list(itertools.chain.from_iterable([range(37, 38), range(43, 44), range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
        5: list(itertools.chain.from_iterable([range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(97, 123)])),
        6: list(itertools.chain.from_iterable([range(48, 58), range(65, 91), range(97, 123)])),
        7: list(itertools.chain.from_iterable([range(32, 34), range(35, 48), range(58, 65), range(91, 97), range(123, 127)])),
    }
