# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class ExerciseTypesAPIGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def userCreate(self, parent=None):
        with RuleContext(self, UnparserRule(name='userCreate', parent=parent)) as current:
            UnlexerRule(src='{', parent=current)
            self.emailField(parent=current)
            UnlexerRule(src=',', parent=current)
            self.isActiveField(parent=current)
            UnlexerRule(src=',', parent=current)
            self.fullNameField(parent=current)
            UnlexerRule(src=',', parent=current)
            self.passwordField(parent=current)
            UnlexerRule(src=',', parent=current)
            self.isSuperuserField(parent=current)
            UnlexerRule(src='}', parent=current)
            self.EOF(parent=current)
            return current
    userCreate.min_depth = 3

    def emailField(self, parent=None):
        with RuleContext(self, UnparserRule(name='emailField', parent=parent)) as current:
            UnlexerRule(src='"email"', parent=current)
            UnlexerRule(src=':', parent=current)
            UnlexerRule(src='"', parent=current)
            self.email(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    emailField.min_depth = 2

    def email(self, parent=None):
        with RuleContext(self, UnparserRule(name='email', parent=parent)) as current:
            with AlternationContext(self, [1, 1, 1, 1], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.EMPTY_EMAIL, self.MISSING_AT, self.MISSING_DOMAIN, self.VALID_EMAIL][choice0](parent=current)
            return current
    email.min_depth = 1

    def EMPTY_EMAIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMPTY_EMAIL', parent=parent)) as current:
            UnlexerRule(src=' ', parent=current)
            return current
    EMPTY_EMAIL.min_depth = 0

    def MISSING_AT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MISSING_AT', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            UnlexerRule(src=' ', parent=current)
            return current
    MISSING_AT.min_depth = 0

    def MISSING_DOMAIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MISSING_DOMAIN', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            UnlexerRule(src='@', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 1, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[3]), parent=current)
            UnlexerRule(src=' ', parent=current)
            return current
    MISSING_DOMAIN.min_depth = 0

    def VALID_EMAIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALID_EMAIL', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[4]), parent=current)
            UnlexerRule(src='@', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 1, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[5]), parent=current)
            UnlexerRule(src='.', parent=current)
            UnlexerRule(src='com', parent=current)
            return current
    VALID_EMAIL.min_depth = 0

    def isActiveField(self, parent=None):
        with RuleContext(self, UnparserRule(name='isActiveField', parent=parent)) as current:
            UnlexerRule(src='"is_active"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.boolean(parent=current)
            return current
    isActiveField.min_depth = 1

    def boolean(self, parent=None):
        with RuleContext(self, UnparserRule(name='boolean', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['true', 'false'][choice0], parent=current)
            return current
    boolean.min_depth = 0

    def fullNameField(self, parent=None):
        with RuleContext(self, UnparserRule(name='fullNameField', parent=parent)) as current:
            UnlexerRule(src='"full_name"', parent=current)
            UnlexerRule(src=':', parent=current)
            UnlexerRule(src='"', parent=current)
            self.fullName(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    fullNameField.min_depth = 2

    def fullName(self, parent=None):
        with RuleContext(self, UnparserRule(name='fullName', parent=parent)) as current:
            self.ALPHANUMERIC(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.ALPHANUMERIC(parent=current)
            return current
    fullName.min_depth = 1

    def passwordField(self, parent=None):
        with RuleContext(self, UnparserRule(name='passwordField', parent=parent)) as current:
            UnlexerRule(src='"password"', parent=current)
            UnlexerRule(src=':', parent=current)
            UnlexerRule(src='"', parent=current)
            self.password(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    passwordField.min_depth = 2

    def password(self, parent=None):
        with RuleContext(self, UnparserRule(name='password', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.EMPTY_PASSWORD(parent=current)
                elif choice0 == 1:
                    self.ALPHANUMERIC(parent=current)
                    if self._max_depth >= 1:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            self.ALPHANUMERIC(parent=current)
            return current
    password.min_depth = 1

    def EMPTY_PASSWORD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMPTY_PASSWORD', parent=parent)) as current:
            UnlexerRule(src=' ', parent=current)
            return current
    EMPTY_PASSWORD.min_depth = 0

    def usernameField(self, parent=None):
        with RuleContext(self, UnparserRule(name='usernameField', parent=parent)) as current:
            UnlexerRule(src='"username"', parent=current)
            UnlexerRule(src=':', parent=current)
            UnlexerRule(src='"', parent=current)
            self.username(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    usernameField.min_depth = 2

    def username(self, parent=None):
        with RuleContext(self, UnparserRule(name='username', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.EMPTY_USERNAME(parent=current)
                elif choice0 == 1:
                    self.ALPHANUMERIC(parent=current)
                    if self._max_depth >= 1:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            self.ALPHANUMERIC(parent=current)
            return current
    username.min_depth = 1

    def EMPTY_USERNAME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMPTY_USERNAME', parent=parent)) as current:
            UnlexerRule(src=' ', parent=current)
            return current
    EMPTY_USERNAME.min_depth = 0

    def isSuperuserField(self, parent=None):
        with RuleContext(self, UnparserRule(name='isSuperuserField', parent=parent)) as current:
            UnlexerRule(src='"is_superuser"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.boolean(parent=current)
            return current
    isSuperuserField.min_depth = 1

    def createExerciseByName(self, parent=None):
        with RuleContext(self, UnparserRule(name='createExerciseByName', parent=parent)) as current:
            with AlternationContext(self, [2, 2], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.validName, self.invalidName][choice0](parent=current)
            return current
    createExerciseByName.min_depth = 2

    def validName(self, parent=None):
        with RuleContext(self, UnparserRule(name='validName', parent=parent)) as current:
            self.ALPHANUMERIC(parent=current)
            self.ALPHANUMERIC(parent=current)
            self.ALPHANUMERIC(parent=current)
            self.ALPHANUMERIC(parent=current)
            self.ALPHANUMERIC(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.ALPHANUMERIC(parent=current)
            return current
    validName.min_depth = 1

    def invalidName(self, parent=None):
        with RuleContext(self, UnparserRule(name='invalidName', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.EMPTY_STRING, self.SPECIAL_CHARACTERS][choice0](parent=current)
            return current
    invalidName.min_depth = 1

    def ALPHANUMERIC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ALPHANUMERIC', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[6]), parent=current)
            return current
    ALPHANUMERIC.min_depth = 0

    def EMPTY_STRING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMPTY_STRING', parent=parent)) as current:
            UnlexerRule(src='" "', parent=current)
            return current
    EMPTY_STRING.min_depth = 0

    def SPECIAL_CHARACTERS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SPECIAL_CHARACTERS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[7]), parent=current)
            return current
    SPECIAL_CHARACTERS.min_depth = 0

    def WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[8]), parent=current)
            return current
    WS.min_depth = 0

    _default_rule = userCreate

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(37, 38), range(43, 44), range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
        2: list(itertools.chain.from_iterable([range(37, 38), range(43, 44), range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
        3: list(itertools.chain.from_iterable([range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(97, 123)])),
        4: list(itertools.chain.from_iterable([range(37, 38), range(43, 44), range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
        5: list(itertools.chain.from_iterable([range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(97, 123)])),
        6: list(itertools.chain.from_iterable([range(48, 58), range(65, 91), range(97, 123)])),
        7: list(itertools.chain.from_iterable([range(32, 34), range(35, 48), range(58, 65), range(91, 97), range(123, 127)])),
        8: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
    }
